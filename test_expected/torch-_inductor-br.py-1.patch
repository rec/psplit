diff --git a/torch/_inductor/br.py b/torch/_inductor/br.py
index fbc15c8764f..4cf22e37bdd 100644
--- a/torch/_inductor/br.py
+++ b/torch/_inductor/br.py
@@ -2834,8 +2871,8 @@ class View(GenericView):
         return idx

     @classmethod
-    def create(cls, x, new_size):  # type: ignore[no-untyped-def]
-        assert isinstance(new_size, (tuple, list))
+    def create(cls, x: IRNode, new_size: Sequence[Expr]) -> IRNode:  # type: ignore[override]
+        assert isinstance(new_size, (tuple, list)), type(new_size)
         old_size, new_size = cls.resolve_negative_size(x.get_size(), new_size)

         # Skip pointless views
@@ -2851,7 +2888,7 @@ class View(GenericView):

         if 0 in new_size:

-            def fake_reindex(index):  # type: ignore[no-untyped-def]
+            def fake_reindex(index: Any) -> tuple[int, ...]:
                 return tuple([0] * len(old_size))

             return cls(data=x, size=list(new_size), reindex=fake_reindex)
@@ -2881,7 +2918,9 @@ class View(GenericView):
         return cls(data=x, size=list(new_size), reindex=reindex)

     @staticmethod
-    def resolve_negative_size(old_size, new_size):  # type: ignore[no-untyped-def]
+    def resolve_negative_size(
+        old_size: Sequence[Expr], new_size: Sequence[Expr]
+    ) -> tuple[Sequence[Expr], Sequence[Expr]]:
         new_size = [V.graph.sizevars.simplify(x) for x in new_size]
         old_size = [V.graph.sizevars.simplify(x) for x in old_size]

@@ -2896,7 +2935,9 @@ class View(GenericView):
         return old_size, new_size

     @classmethod
-    def dynamic_reshape_indexer(cls, old_size, new_size):  # type: ignore[no-untyped-def]
+    def dynamic_reshape_indexer(
+        cls, old_size: Sequence[Expr], new_size: Sequence[Expr]
+    ) -> Callable[[Sequence[Expr]], Sequence[Expr]]:
         try:
             reindex = cls._dynamic_reshape_indexer(old_size, new_size)
         except (AssertionError, IndexError):
@@ -2908,7 +2949,9 @@ class View(GenericView):
         return reindex

     @staticmethod
-    def _dynamic_reshape_indexer(old_size, new_size):  # type: ignore[no-untyped-def]
+    def _dynamic_reshape_indexer(
+        old_size: Sequence[Expr], new_size: Sequence[Expr]
+    ) -> Callable[[Sequence[Expr]], Sequence[Expr]]:
         """
         Perform a reshape entirely by modifying indexing math
         """
@@ -2967,7 +3010,9 @@ class View(GenericView):
         view_expr.reverse()
         assert len(view_expr) == len(old_size)

-        def reindex(index):  # type: ignore[no-untyped-def]
+        def reindex(
+            index: Sequence[Expr],
+        ) -> Sequence[Expr]:
             assert len(index) == len(vars), (len(index), len(vars))
             replacements = dict(zip(vars, index))
             return tuple(sympy_subs(x, replacements) for x in view_expr)
